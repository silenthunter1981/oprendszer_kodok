OS. gyak 3
---
pipe(|), wc, cut, sort, ps, fg, kill, find

Programok összefűzése a pipe paranccsal segítségével
Programokat amelyekak konzolra írnak és konzolról olvasnak összefűzzük (pipeolás)
ls -l | tail -n 5: részletes listát átadja a tailnek, amely kilistázza az utolsó 5 sort 
cat olvassel.txt | head -n 5: az olvassel.txt első 5 sorát adja vissza

Több fájl esetén kiíratja a nevét, amelyet -q kapcsoló el lehet tüntetni

cat fájl1.txt fájl2.txt | head -n 2: a fájl1.txt és fájl2.txt a cat által egyesített megjelenítésének első két sorát iratja ki

Pipe több parancsot is egybe lehet fűzni
Írassuk ki egy fájl 2. sorát

cat sorok.txt - jelenítse meg mindet
cat sorok.txt | head -n 2 - jelenítse meg az első kettőt
cat sorok.txt | head -n 2 | tail -n 1 - jelenítse meg az első kettőből az utolsót
 
Írassuk ki egy fájl utolsó előtti sorát
 
cat sorok.txt - jelenítse meg mindet
cat sorok.txt | tail -n 2 - jelenítse meg az utolsó kettőt
cat sorok.txt | tail -n 2 | head -n 1 | jelenítse meg az utolsó kettőből az elsőt

Sorok, szavak, karakterek száma:
wc parancs
wc -l: sorok száma
wc -w: szavak száma
wc -c: karakterek száma

Az előbbiek kombinálhatók is
wc -wl: a szavakat és a sorokat is számolja meg
wc minden kiír

Pipe esetén használható, pl. számolja meg hány bejegyzés van az adott könyvtárban

ls -1 | wc -l: a bejegyzések kiíratása egy oszlopba, majd sorok számának összeszámolása
wc -l *.txt: az összes bejegyzés sorok száma, össz. száma

Cut (mezők vágása)
---
Adatott sorokból melyik mezőt adja vissza
cut -c kezdő-vég karakterek
cut -c 2-5 fájl.txt, a sorokból kivágja a 2-5 közötti karaktereket
cut -c 3 fájl.txt, csak a 3. karakterek

Példa, 1-3 karakter kivágása:
cat sorok.txt | cut -c 1-3

Mező vágása, egy elhatároló alapján (-d kapcsoló), amely alapesetben egy tab
cat sorok.txt | cut -d -f 2 (második oszlop kivágása -f kapcsoló segítségével)
cat sorok.txt | cut -d ';' -f 1 (első oszlop kivágása, egy olyan struktúrában, amelyeket ";"-al vannak elválasztva)

sort (rendezés)
pl. cat nevek.txt | sort (abc sorrend)

sort -r (csökkenő sorrend)
pl. cat nevek.txt | sort -r 

sort -k:  melyik mező szerint rendezzen
pl. ls -l | sort -k 6 (dátum növekvő)

sort -n: numerikus sorrendezés
pl. ls -l | sort -n -k 5 (méret alapján numberikusan rendezzen)

sort -t (helykitöltő alapú rendezés)
sort -t ';' -k 2 fájl.txt (";" helykitöltő alapján rendezzen, a második adattag alapján)

Példa:
Jelenítse meg a könyvtárában a legnagyobb fájl adatait:
ls -l | sort -k 5 | tail -n 1
Jelenítse meg a könyvtárában a legkisebb fájl adatait:
ls -l | sort -k 5 | head -n 2 | tail -n 1

sort -u: egyező sorok elrejtése
pl. cat telefonszamok.txt | sort -u

Folyamatok:
A /proc alatt egy virtuális fájlrendszer található, ahol a futó folyamatokól tudhatunk meg információkat
pl. cat /proc/cpuinfo (a gép CPU adatainak lekérdezése)

ps: saját folyamataimat mutatja
Összes felhasználó összes folyamata bővített formátumban:
ps aux (a - összes, u - felhasználók, x - bővített formátum)

Folyamat leállítása: kill

pl.
nano lorem.txt
új terminálablak indítása
ps aux (kilistázom a folyamatokat)
Ezt követően kiválasztom a leállítandó folyamat PID-ját, és ezt adom meg a kill parancs paraméterének
kill 1322

ps f (gyerek folyamatok kilistáza)

killall folyamatnév: összes meghatározott nevű folyamat leállítása

Futó folyamatok listázáta: jobs
Futó folyamat háttérbe helyezése:
nano lorem.txt & (háttérben fusson), vagy futás közben ctrl + z 
ezt követően kiírja a rendszer, hogy
[1] - 1 jobs
234567 - Process id

Első (1) job előtérbe helyezése:
fg 1 (első jobot)

Felfüggesztett folyamat leállítás:
kill pid (process id)
kill -9 %1 (-9/SIGKILL %job id)

Keresés: find parancs
A find segítségével egy adott könyvtárban egy adott állományt/állományokat keresünk
Fontos, hogy alapesetben rekurzív, lemegy a legalsó gyerekig
Lehet, név, típus, vagy méret és egyéb tulajdonságok alapján

find könyvtár kapcsolók tulajdonságok/jellegek

-name: névre keressen
-iname: ne legyen kis/nagybetű érzékeny
-regexp: reguláris kifejezés
-type f, -type d: fájl/könyvtár
-size: méret
-exec: a megtalált fájlokon egy parancsot hajtson végre
-maxdepth: könyvtár mélység
-group: csoport definiálása

Példák (a "." az aktuális mappa helye, átírható tetszőleges struktúrára):

find . -name hudemely.txt
find . -name "*.txt"
find . mappa -type f -name "*.txt" (fontos: a reguláris kifejezéseket idézőjel közé kell tenni)

find . -type f -name "*.txt" -exec ls -l "{}" \; {ide hellyetesítődik be amit a find talál}

Összes könytár információ kilistázásaa
find . -type d -exec ls -ld "{}" \; (ls -ld: könyvtár információk kilistázása hosszú formátumban)

Összes txt fájl első két sorának kiíratása
find . -type f -name "*.txt" -exec head -n 2 "{}" \;   

Hány sorból állnak a .txt kiterjesztésű fájlok
find . -type f -name "*.txt" -exec wc -l "{}" \;

Biztonsági mentés egy mappába
find . -maxdepth 1 -type f -name "*.txt" -exec cp "{}" ./backup/"{}".bak \;

A txt fájloknak összesen hány soruk van
find . -type f -name "*.txt" -exec cat "{}" \; | wc -l

A txt fájloknak összes sorát rendezzük és lapozhatóvá tegyük
find . -type f -name "*.txt" -exec cat "{}" \; | sort | more
